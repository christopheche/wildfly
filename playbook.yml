---

- hosts: all
  vars:
    wildfly_remove_download_file: true
    wildfly_management_users:
      - { name: 'admin', password: 'adminsecretpassword' }

    wildfly_manage_java_pkg: true
    wildfly_manage_firewall: true
    wildfly_manage_standalone_data: true
    wildfly_manage_service: true
    wildfly_remove_download_file: true

    wildfly_version: 11.0.0.Final
    wildfly_major_v: "{{ wildfly_version.partition('.')[0] }}"

    wildfly_manage_user: true
    wildfly_user: wildfly
    wildfly_group: wildfly

    wildfly_base_download_url: http://download.jboss.org/wildfly
    wildfly_name: wildfly-{{ wildfly_version }}
    wildfly_download_validate_certs: "yes"
    wildfly_download_file: "{{ wildfly_name }}.tar.gz"
    wildfly_download_url: "{{ wildfly_base_download_url }}/{{ wildfly_version }}/\
                           {{ wildfly_download_file }}"
    wildfly_download_dir: /tmp

    wildfly_install_dir: /opt
    wildfly_dir: "{{ wildfly_install_dir }}/{{ wildfly_name }}"
    wildfly_dir_mode: '0750'
    wildfly_create_symlink: true

    wildfly_init_src_path: "{{ 'docs/contrib/scripts' if wildfly_major_v | version_compare('10', '>=') else 'bin' }}"

    wildfly_console_log_dir: "/var/log/wildfly"
    wildfly_console_log_file: "console.log"
    wildfly_console_log: "{{ wildfly_console_log_dir }}/\
                          {{ wildfly_console_log_file }}"

    wildfly_conf_dir: /etc/wildfly
    wildfly_standalone_config_file: standalone.xml
    wildfly_standalone_config_path: "{{ wildfly_dir }}/standalone/configuration/\
                                     {{ wildfly_standalone_config_file }}"
    wildfly_startup_wait: ''
    wildfly_shutdown_wait: ''

    wildfly_node_name: ''
    wildfly_init_dir: /etc/init.d
    wildfly_systemd_dir: /usr/lib/systemd/system

    wildfly_bind_address: 0.0.0.0
    wildfly_management_bind_address: 0.0.0.0
    wildfly_manage_http_port: 9990
    wildfly_manage_https_port: 9993
    wildfly_http_port: 80
    wildfly_https_port: 443
    wildfly_bind_address_unsecure: ''
    wildfly_messaging_group_address: ''

    wildfly_management_users: []
    wildfly_app_users: []

    wildfly_enable_ssl: no
    wildfly_keystore_name: my.jks
    wildfly_keystore_path: "{{ wildfly_dir }}/standalone/configuration/\
                            {{ wildfly_keystore_name }}"
    wildfly_keystore_alias: my
    wildfly_keystore_password: "secret"
    wildfly_key_password: "secret"
    wildfly_application_ssl_identity: '
        <server-identities>
            <ssl>
                <keystore path="{{ wildfly_keystore_name }}"
                 relative-to="jboss.server.config.dir"
                 alias="{{ wildfly_keystore_alias }}"
                 keystore-password="{{ wildfly_keystore_password }}"
                 key-password="{{ wildfly_key_password }}"/>
            </ssl>
        </server-identities>'
    wildfly_https_listener: '
        <https-listener name="https-server" socket-binding="https"
         security-realm="ManagementRealm"/>'

  tasks:
- name: Install OpenJDK
  yum:
    name: java-1.8.0-openjdk-headless
    state: present
  when: wildfly_manage_java_pkg

- name: Download wildfly tar file
  get_url:
    url: '{{ wildfly_download_url }}'
    dest: '{{ wildfly_download_dir }}/{{ wildfly_download_file }}'
    validate_certs: '{{ wildfly_download_validate_certs }}'

- block:
    - name: Create wildfly group
      group:
        name: '{{ wildfly_group }}'
        state: present

    - name: Create wildfly user
      user:
        name: '{{ wildfly_user }}'
        group: '{{ wildfly_group }}'
        createhome: no
        shell: "{{ wildfly_user_shell |default(omit) }}"
        state: present
  when: wildfly_manage_user

- name: Unarchive downloaded file
  unarchive:
    src: '{{ wildfly_download_dir }}/{{ wildfly_download_file }}'
    dest: '{{ wildfly_install_dir }}'
    owner: '{{ wildfly_user }}'
    group: '{{ wildfly_group }}'
    mode: '{{ wildfly_dir_mode }}'
    copy: no
    creates: "{{ wildfly_dir }}/bin/standalone.sh"

- name: Create symlink to installed version
  file:
    state: link
    src: "{{ wildfly_dir }}"
    dest: "{{ wildfly_install_dir }}/wildfly"
  when: wildfly_create_symlink

- name: Create wildfly etc directory
  file:
    path: '{{ wildfly_conf_dir }}'
    state: directory
    owner: '{{ wildfly_user }}'
    group: '{{ wildfly_group }}'
    mode: '0750'

- name: Copy wildfly configuration
  template:
    src: wildfly.conf.j2
    dest: '{{ wildfly_conf_dir }}/wildfly.conf'
    owner: root
    group: root
    mode: '0640'
  notify:
    - restart wildfly
    - change standalone data mode

- name: Create symlink to /etc/default/wildfly.conf
  file:
    state: link
    src: '{{ wildfly_conf_dir }}/wildfly.conf'
    dest: /etc/default/wildfly.conf

- name: Copy wildfly properties file
  template:
    src: wildfly.properties.j2
    dest: '{{ wildfly_conf_dir }}/wildfly.properties'
    owner: '{{ wildfly_user }}'
    group: '{{ wildfly_group }}'
    mode: '0640'
  notify:
    - restart wildfly
    - change standalone data mode

- name: Create symlink to upstream init script
  file:
    state: link
    src: '{{ wildfly_install_dir }}/wildfly/{{ wildfly_init_src_path }}/init.d/wildfly-init-{{ ansible_os_family | lower }}.sh'
    dest: '{{ wildfly_init_dir }}/wildfly'
  when: ansible_service_mgr in ['init', 'upstart']
  notify:
    - restart wildfly
    - change standalone data mode

- name: Copy wildfly systemd unit file
  template: src=wildfly.service.j2 dest={{ wildfly_systemd_dir }}/wildfly.service owner=root
            group=root mode=0640
  when: ansible_service_mgr == 'systemd'
  notify:
    - restart wildfly
    - change standalone data mode

- meta: flush_handlers

- block:
    - name: Enable and start the service
      service:
        name: wildfly
        state: started
        enabled: yes
    - name: Wait for wildfly to start
      wait_for:
        path: "{{ wildfly_dir }}/standalone/log/server.log"
        search_regex: 'started in'
  when: wildfly_manage_service

- name: Delete wildfly tar file
  file:
    path: '{{ wildfly_download_dir }}/{{ wildfly_download_file }}'
    state: absent
  when: wildfly_remove_download_file

- name: Create management users
  shell: >
    {{ wildfly_dir }}/bin/add-user.sh -s
    {{ item.name }} {{ item.password }} && touch {{ wildfly_dir }}/.mgmt-users.{{ item.name }}.provisioned
  with_items: "{{ wildfly_management_users }}"
  become: True
  become_user: '{{ wildfly_user }}'
  args:
    creates: "{{ wildfly_dir }}/.mgmt-users.{{ item.name }}.provisioned"
  when: wildfly_management_users | length > 0
  no_log: True

- name: Create application users
  shell: >
    {{ wildfly_dir }}/bin/add-user.sh -s -a
    {{ item.name }} {{ item.password }} && touch {{ wildfly_dir }}/.app-users.{{ item.name }}.provisioned
  with_items: "{{ wildfly_app_users }}"
  become: True
  become_user: '{{ wildfly_user }}'
  args:
    creates: "{{ wildfly_dir }}/.app-users.{{ item.name }}.provisioned"
  when: wildfly_app_users | length > 0
  no_log: True

- name: Enforce secure permissions on password files
  file:
    path: "{{ wildfly_dir }}/standalone/configuration/{{ item }}"
    owner: "{{ wildfly_user }}"
    group: "{{ wildfly_group }}"
    mode: "0600"
  with_items:
    - mgmt-groups.properties
    - mgmt-users.properties
